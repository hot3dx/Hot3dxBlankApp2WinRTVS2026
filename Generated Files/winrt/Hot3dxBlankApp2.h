// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.250303.1

#pragma once
#ifndef WINRT_Hot3dxBlankApp2_H
#define WINRT_Hot3dxBlankApp2_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.250303.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.250303.1"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Xaml.2.h"
#include "winrt/impl/Windows.UI.Xaml.Controls.2.h"
#include "winrt/impl/Windows.UI.Xaml.Markup.2.h"
#include "winrt/impl/Hot3dxBlankApp2.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_Hot3dxBlankApp2_IMainPage<D>::MyProperty() const
    {
        int32_t value{};
        if constexpr (!std::is_same_v<D, winrt::Hot3dxBlankApp2::IMainPage>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Hot3dxBlankApp2::IMainPage, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Hot3dxBlankApp2::IMainPage>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->get_MyProperty(&value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Hot3dxBlankApp2::IMainPage>**)this;
            check_hresult(_winrt_abi_type->get_MyProperty(&value));
        }
        return value;
    }
    template <typename D> auto consume_Hot3dxBlankApp2_IMainPage<D>::MyProperty(int32_t value) const
    {
        if constexpr (!std::is_same_v<D, winrt::Hot3dxBlankApp2::IMainPage>)
        {
            winrt::hresult _winrt_cast_result_code;
            auto const _winrt_casted_result = impl::try_as_with_reason<winrt::Hot3dxBlankApp2::IMainPage, D const*>(static_cast<D const*>(this), _winrt_cast_result_code);
            check_hresult(_winrt_cast_result_code);
            auto const _winrt_abi_type = *(abi_t<winrt::Hot3dxBlankApp2::IMainPage>**)&_winrt_casted_result;
            check_hresult(_winrt_abi_type->put_MyProperty(value));
        }
        else
        {
            auto const _winrt_abi_type = *(abi_t<winrt::Hot3dxBlankApp2::IMainPage>**)this;
            check_hresult(_winrt_abi_type->put_MyProperty(value));
        }
    }
    template <typename D>
    struct produce<D, winrt::Hot3dxBlankApp2::IMainPage> : produce_base<D, winrt::Hot3dxBlankApp2::IMainPage>
    {
        int32_t __stdcall get_MyProperty(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().MyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MyProperty(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MyProperty(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::Hot3dxBlankApp2
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Hot3dxBlankApp2::IMainPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Hot3dxBlankApp2::MainPage> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Hot3dxBlankApp2::XamlMetaDataProvider> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
